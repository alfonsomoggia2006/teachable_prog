


























import numpy as np
import cv2
from tensorflow.keras.models import load_model

def load_tf_model(path):
    # Caricamento del modello
    model = load_model(path, compile=False)
    return model

def load_image(path):
    # Lettura dell'immagine
    image = cv2.imread(path)
    return image

def preprocess_image(image):
    # Pre-elaborazione dell'immagine nel formato aspettato dal modello
    image_resized = cv2.resize(image, (224, 224))  # Ridimensiona l'immagine
    image_normalized = (image_resized / 127.5) - 1  # Normalizza i valori dei pixel
    image_preprocessed = to_tensor(image_normalized)  # Converte in tensore
    return image_preprocessed

def to_tensor(image):
    num_images = 1
    altezza = image.shape[0]
    larghezza = image.shape[1]
    num_color_channels = image.shape[2]
    tensore = (np.asarray(image, dtype=np.float32)
                 .reshape(num_images, altezza, larghezza, num_color_channels))
    return tensore

def get_prediction(model, image_preprocessed):
    # Ottenere la predizione proposta dal modello
    predictions = model.predict(image_preprocessed)
    predicted_class = np.argmax(predictions)  # Classe con la massima probabilità
    prediction_confidence = np.max(predictions)  # Probabilità massima
    return predicted_class, prediction_confidence

# Esempio di utilizzo
model_path = "percorso/del/tuo/modello.h5"  # Specifica il percorso del tuo modello
image_path = "C:\Users\Pcto Gel\Desktop\PCTO\OpenCV\\ferrari.png"   # Specifica il percorso dell'immagine da testare

model = load_tf_model(model_path)
img = load_image(image_path)
img_preprocessed = preprocess_image(img)
class_name, confidence_score = get_prediction(model, img_preprocessed)

# Stampiamo i risultati
print("Class:", class_name, end=" ")
print(f"Confidence Score: {round(confidence_score * 100)}%")